---
layout: post
title: LeetCode5. Longest Palindromic Substring
date: 2021-09-09 23:40:44 +0900
category: Algorithm
---
### LeetCode 5. Longest Palindromic Substring

![](/assets/img/leetcode/5.png)
- 가장 긴 대칭문자열 구하기
<br><br>





>코드


```c#
public class Solution
{
    public string LongestPalindrome(string str)
    {
        if (str.Length < 1)
        {
            return str;
        }

        int startIndex = 0;
        int length = 0;

        for (int i = 0; i < str.Length; i++)
        {
            if (i - length > 0 && str.Substring(i - length - 1, length + 2) == Reverse(str.Substring(i - length - 1, length + 2))) //두개씩 같은것!
            {
                startIndex = i - length - 1;
                length += 2;
            }
            else if (str.Substring(i - length, length + 1) == Reverse(str.Substring(i - length, length + 1))) //두개짜리!
            {
                startIndex = i - length;
                length++;
            }             
        }
        
        return str.Substring(startIndex, length);
    }
    static string Reverse(string text)
    {
        char[] charArray = text.ToCharArray();
        Array.Reverse(charArray);
        return new string(charArray);
    }
}
```

> i는 오른쪽 끝 startIndex는 왼쪽 끝으로 만든 문자열
세상에서 제일 어려운 풀이법인듯

<br><br>
<br><br>

>개인적으로 나은 코드


```c#

public class Solution
{
    public string LongestPalindrome(string str)
    {
        if (str.Length < 1)
        {
            return str;
        }
        string ret = str[0].ToString();
        string retTemp;
        string tempRet1, tempRet2;
        for (int i = 0; i < str.Length; i++)
        {
            tempRet1 = Compare(str, i, i + 1);            
            tempRet2 = Compare(str, i - 1, i + 1);

            retTemp = tempRet1.Length > tempRet2.Length ? tempRet1 : tempRet2;

            if (retTemp.Length > ret.Length)
            {
                ret = retTemp;
            }
        }
        return ret;
    }

    private string Compare(string str, int startIndex, int lastIndex)
    {
        if (startIndex < 0 || lastIndex >= str.Length)
        {
            return "";
        }
        while (startIndex >= 0 && lastIndex < str.Length && str[startIndex] == str[lastIndex])
        {
            startIndex--;
            lastIndex++;
        }
        return str.Substring(startIndex + 1, lastIndex - startIndex - 1);
    }
}
```


<br><br>

>알아보기도 쉽고 구현하기도 쉽고 빠르고!
하나씩 가면서 짝수개 겹치는것 홀수개 겹치는것 확인
