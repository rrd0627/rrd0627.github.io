---
layout: post
title: Refactoring 3
date: 2022-01-17 23:47:28 +0900
category: Refactoring
---
### 기본적인 리팩터링

<br>

### 함수 추출하기!

함수 하나가 한 화면을 넘어간다면 함수로 나눈다!

두 번 이상 사용되는 코드는 함수로 만든다!

코드를 보고 파악하는데 오래걸린다면 함수로 추출 한뒤 '무슨일' 에 맞는 이름을 지어준다.



함수내에 지역변수를 사용한다면 인자로 넘기기 


### 함수 인라인

호출이 한번밖에 없고 너무 간단한함수는 간접 호출을 없애기 위해서 함수를 없애고 인라인화 시키는것!


### 변수 추출하기

함수 내에 표현식이 복잡하다면 적당한 이름을 가진 변수를 만들어 넣기
특히 클래스내에 새로운 변수를 넣어 적당한 이름을 가져 추상화 해 두면 클래스를 다루기 훨씬 쉬워진다.

### 변수 인라인

쓸떼없는 변수를 만든경우 줄이기!

### 함수 선언 바꾸기

함수의 이름을 바꾸는것! 
함수의 이름만 가지고 해당 함수가 무엇을 하는지 설명 된다면 함수를 다시 볼필요가 없다.

좋은 이름을 가지는데에는 주석을 이용해 함수의 목적을 설명해보면 된다!

### 변수 캡슐화

public 은 프로퍼티를 쓴다 정도...

### 변수 이름 바꾸기

하는일을 잘 설명하는 변수 이름짓기!!

### 매개변수 객체 만들기

인자가 여러개 들어가는데 그것들이 상관관계가 있는경우 객체로 만들어 인자로 넣어주기
EX) min , max 로 들어가는것을 Range라는 객체로 보내주어
Range.min Range.max 로 사용

### 여러 함수를 클래스로 묶기

공통 데이터를 활용하여 작동하는 함수무리는 클래스로 만들어 각 함수에 전달되는 인자를 줄여 함수 호출을 간단하게 만들 수 있다.

### 여러 함수를 변환 함수로 묶기

클래스로 묶는것과 비슷함! 하지만 변환함수는 구조체와 같다.

### 단계 쪼개기

한 함수내에 단계로 이루어져 있다면 함수로 추출한다.

단계간에 주고받는 인자는 새로운 데이터구조를 만들어 활용한다.


