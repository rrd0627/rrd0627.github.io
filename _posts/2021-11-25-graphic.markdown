---
layout: post
title: 모바일 쉐이더
date: 2021-11-25 21:48:34 +0900
category: Graphics
---

# 모바일 쉐이더

내장된 쉐이더에는 Diffuse , Diffuse Bumped, Diffuse Bumped Specular, Vertex lit 등 여러 쉐이더가 존재함.

이중 Diffuse, Vertex lit은 버텍스 당 라이팅이 처리되는 **퍼 버텍스 라이팅** 쉐이더이다.

반면, Diffuse Bumped, Bumped Specular는 픽셀마다 라이팅이 처리되는 **퍼 픽셀 라이팅** 쉐이더이다!

퍼 픽셀 라이팅은 라이팅의 중요도에 따라서 퍼 버텍스 라이팅으로 처리되기도함! ( 라이트 컴포넌트와 렌더 모드에 의해 바뀜 )

# 이미지 기반 라이팅

실시간 전역 조명을 사용하면 모바일 디바이스에서는 무리가 있음.

그래서 성능 대비 높은 품질의 라이팅을 위해서 이미지 기반 라이팅을 활용. ( 또는 Light Probe )

텍스쳐에 미리 라이팅을 그려넣어 라이팅 대신 사용하는것.

### Toon Ramp

라이팅의 벡터와 표면의 노멀 벡터의 각에 따른 라이트 반응 결과를 텍스처에 미리 그려넣는 방식! 

### MatCap 쉐이더

Material Capture 현실의 라이팅을 수집하여 캡쳐한 구체!

뷰공간 기준으로 씌우는 방식이라서 카메라가 고정되있으면 자연스러움!

# 쉐도우 맵

유니티에서 제공하는 그림자는 쉐도우맵 기법을 사용함.

이 기법은 모든 굴곡에 대응하고 셀프-쉐도우가 처리되는 높은 퀄리티를 가짐. 성능이 문제.

>그림자가 처리되는 과정
우선 뎁스 텍스처를 생성함. ( 카메라를 기준으로 가까울수록 검은색 멀수록 흰색으로 나타내 깊이 텍스처를 생성 )
뎁스 텍스쳐를 생성하기 위해서는 그림자에 영향을 받는 모든 오브젝트를 렌더링함.
그 후, 그림자 처리를 위한 별도의 버퍼 **쉐이더맵에** 광원에서 바라보는 오브젝트의 픽셀들의 깊이를 저장 ( 광원을 기준으로 가까울수록 검은색 멀수록 흰색 )
광원으로부터 쉐도우맵에 저장된 거리보다 멀리있으면 어떤 오브젝트에 의해 가려진것으로 판단하고 그림자를 드리움.

뎁스 텍스처와 쉐도우맵을 렌더링 하기 위해서 추가적인 드로우콜 필요.
또한 화면에 보이는 모든 픽셀에 대해 그림자 결과에 필요한 연산과 비교 분기가 처리되기 때문에 픽셀 쉐이더의 성능이 소모됨.

Shadow Only 를 활용하여 렌더링되는 것은 높은 품질의 메시를 사용하고 그림자는 낮은 품질의 그림자 메시를 활용하여 시스템 성능 절약가능.

Shadow Distance가 줄어들면 그림자의 해상도를 높이는 효과가 있음.

일반적으로 Shadow Distance는 작게 설정하고 멀리있는 그림자는 라이트맵을 활용함.

멀리까지 보이게 하고싶다면 Cascades를 활용하여 쉐도우맵을 범위별로 여러개 만들어 활용하는 방법이있음.
대신 맵을 구성하기 위한 더 많은 드로우콜이 요구됨. 또한 픽셀 쉐이더의 부담도 늘어남. 영역 분할하여 연산하는 처리가 추가적으로 필요함.
결론 모바일에선 안씀!

# 평면 그림자

바닥이 평면인 경우에는 케릭터 아래에 동그라미로 간단히 표현하는 방법!

또는 메시를 평면으로 만들어 바닥에 그려주는 방법!

예시(https://github.com/ozlael/PlannarShadowForUnity)
