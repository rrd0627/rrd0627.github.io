---
layout: post
title: 디자인패턴
date: 2021-10-12 23:38:02 +0900
category: DesignPattern
---
# 컴포넌트 패턴
<br/>

> 기능을 잘게 나누어 사용하는 패턴
쉽게 읽히고 다른 스크립트와 엮이지 않음

<br>

# 싱글톤 패턴
<br/>

> 한개의 인스턴스를 가지고 전역적인 접근이 가능하도록 한 패턴

<br>

# 스트레티지 패턴
<br/>

> 동일 목적의 기능을 서로 교환할 수 있도록 하는 패턴 

![](/assets/img/designpattern/2021-10-12-23-45-40.png)

각각의 객체는 Moving 과 Attack의 전략을 셋팅한다.
쉽게 다른 전략을 추가할 수 있다!

<br>

# 심플 팩토리 패턴
<br/>

> 객체 생성 패턴 중 기본! 주어진 입력을 기반으로 객체를 반환하는 패턴!

<br>

# 팩토리 매서드 패턴
<br/>

> 객체를 생성하기 위한 인터페이스를 정의! 서브클래스에서 결정함으로써 객체 생성을 캡슐화!

![](/assets/img/designpattern/2021-10-12-23-59-40.png)

<br>

# 추상팩토리 패턴
<br/>

> 팩토리 매서드와 비슷! 관련성이 있는 여러 종류의 객체를 생성 할 때 사용!

<br>

# 프로토타입 패턴
<br/>

> 모든 객체 생성을 new 로 하지 않고 본래 object로부터 새로운 object를 만들어냄

![](/assets/img/designpattern/2021-10-13-00-02-48.png)

<br>

# 플라이웨이트 패턴
<br/>

> 공통된 데이터는 공유하게 하여 메모리 사용량 줄이기! 생성된 객체를 공유하는 포인터 개념!

<br>

# 오브젝트 풀 패턴
<br/>

> 미리 만들어 놓기 
사용안함/사용함 바꾸기

<br>

# 빌더 패턴
<br/>

> 복잡한 유형의 오브젝트를 조합하여 만드는데 사용
객체를 구성하는 부분을 서브클래스에서 생성하고 조합함으로 객체를 생성

<br>

# 상태 패턴
<br/>

> 노트북 전원 버튼 누르기
언제는 꺼지고 언제는 켜지고! 조건문 처리!

<br>

# 옵저버 패턴
<br/>

> 한 객체가 그 객체를 의존하는 다른 객체들에게 자동으로 내용을 갱신시켜주는 패턴
이벤트 콜백!

<br>

# 어댑터 패턴
<br/>

> 한 클래스의 인터페이스를 클라이언트에서 사용하고자 하는 다른 인터페이스로 변환함

<br>

# 커맨드 패턴
<br/>

> 매서드 호출을 실체화 , 즉 객체로 감싼 것
매서드를 호출하는곳에서는 항상 같은 인터페이스로 호출하고
실체화하는 서브 클래스에서만 바뀌기 때문에 편함!

<br>

