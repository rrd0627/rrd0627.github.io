---
layout: post
title: LeetCode 72. Edit Distance
date: 2022-02-24 00:03:24 +0900
category: Algorithm
---
### LeetCode 72. Edit Distance

![](/assets/img/leetcode/72.png)

- 가장 적은 변화로 문자열 같게 만들기

<br><br>

>코드

```c#
public class Solution
{
    public int MinDistance(string word1, string word2)
    {
        int[,] dist = new int[word1.Length + 1, word2.Length + 1];

        for (int i = 0; i < word1.Length + 1; i++)
        {
            dist[i, 0] = i;
        }
        for (int i = 0; i < word2.Length + 1; i++)
        {
            dist[0, i] = i;
        }

        for (int i = 0; i < word1.Length; i++)
        {
            for (int j = 0; j < word2.Length; j++)
            {
                if (word1[i] == word2[j])
                {
                    dist[i + 1, j + 1] = dist[i, j];
                }
                else
                {
                    dist[i + 1, j + 1] = Min(dist[i, j + 1], dist[i + 1, j], dist[i, j]) + 1;
                }

            }
        }
        return dist[word1.Length, word2.Length];
    }

    private int Min(int a, int b, int c)
    {
        return Math.Min(Math.Min(a, b), c);
    }
}
```

이걸 위한 알고리즘이 있다

비어있는 문자열에서부터 문자 한개씩 더해가며 비교하는것

비교했을때 같은 문자인 경우 서로 없는것이나 마찬가지라서 그 전에 것을 따라가고

그 외의 경우에는 더해주거나 바꾸는 경우로 왼쪽 위쪽(더하기) 대각선왼쪽위(바꾸기) 중 가장 작은값 + 1 이 된다.