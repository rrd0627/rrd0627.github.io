---
layout: post
title: LeetCode 20. Valid Parentheses
date: 2021-10-11 21:41:18 +0900
category: Algorithm
---
### LeetCode 20. Valid Parentheses

![](/assets/img/leetcode/20.png)

- 유효한 괄호인가!

<br><br>

>코드

```c#
public class Solution
{
    public bool IsValid(string s)
    {
        Stack<char> stack = new Stack<char>();
        char postChar;
        for (int i = 0; i < s.Length; i++)
        {
            if (s[i] == '(' || s[i] == '{' || s[i] == '[')
            {
                stack.Push(s[i]);
            }
            else if (s[i] == ')')
            {
                if (stack.TryPop(out postChar))
                {
                    if (postChar == '(') continue;
                    else return false;
                }
                else
                {
                    return false;
                }
            }
            else if (s[i] == '}')
            {
                if (stack.TryPop(out postChar))
                {
                    if (postChar == '{') continue;
                    else return false;
                }
                else
                {
                    return false;
                }
            }
            else if (s[i] == ']')
            {
                if (stack.TryPop(out postChar))
                {
                    if (postChar == '[') continue;
                    else return false;
                }
                else
                {
                    return false;
                }
            }
        }
        if (stack.Count == 0)
            return true;
        else
            return false;
    }
}

```

개 쓰레기코드! 일단 후다닥한다면 이렇게 하겠지라는 코드

<br><br>

>개선코드

```c#
public class Solution
{
    public bool IsValid(string s)
    {
        Dictionary<char, char> map = new Dictionary<char, char>();
        Stack<char> stack = new Stack<char>();

        map.Add(')', '(');
        map.Add('}', '{');
        map.Add(']', '[');

        for (int i = 0; i < s.Length; i++)
        {
            if (map.ContainsValue(s[i]))
            {
                stack.Push(s[i]);
            }
            else
            {
                if (stack.TryPop(out char postChar))
                {
                    if (map[s[i]] == postChar)
                    {
                        continue;
                    }
                    else return false;
                }
                else
                {
                    return false;
                }
            }
        }
        return stack.Count == 0;
    }
}
```

성능엔 차이가 별로 없긴한데 보기에 이쁨

<br><br>

